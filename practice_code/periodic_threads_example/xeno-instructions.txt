# Uncompress the example
cd /tmp
tar xvzf xenotest.tgz

# To compile for User Space:
cd RTTest
make -f Makefile.userspace

# Prepare Stuff...
tar xvzf mkfs.tgz
tar xvjf binaries-xeno.tar.bz2
tar xvjf kern-headers-xeno.tar.bz2

# --- WARNING!!! You also need to uncompress the cross-compiler (and
# eventually qemu) and properly set your PATH!


cd initramfs-scripts
vi mkbusybox.sh 	# Properly set BUSYBOX=...
./mkfs.sh
cd ..

# Copy xenomai modules in place
cp -r Xeno/lib/modules rootfs/lib

# To compile Kernel Space: 
cd RTTest
make -C /tmp/l-head M=/tmp/RTTest ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnu-
# Note: a previous version of kern-headers-xeno.tar.bz2 was wrong! If you
# get strange errors when compiling the test program, please download the
# headers again. If you are not on Debian, and the test application still
# does not compile, do:
# make -C /tmp/l-head ARCH=arm M=/tmp/l-head/scripts clean
# make -C /tmp/l-head ARCH=arm prepare
# make -C /tmp/l-head ARCH=arm M=/tmp/l-head/scripts CROSS_COMPILE=arm-unknown-linux-gnu-
# and then
# make -C /tmp/l-head ARCH=arm M=/tmp/RTTest CROSS_COMPILE=arm-unknown-linux-gnu-
# again
cp  posix-test.ko /tmp/rootfs
cd ..

# Rebuild the image
cd rootfs
find . | cpio -o -H newc | gzip > ../newfs.img
cd ..

# Test with Qemu
Qemu/bin/qemu-system-arm -kernel Xeno/zImage -initrd newfs.img


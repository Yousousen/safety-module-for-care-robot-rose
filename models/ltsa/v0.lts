/* constants to denote the minimum and maximum values a sensor can measure */
const BEG_SENSOR = 0
const END_SENSOR = 3
/* constants to denote what values denote safe and unsafe behaviour*/
const BEG_SAFE = BEG_SENSOR
const END_SAFE = 1
const BEG_UNSAFE = END_SAFE + 1
const END_UNSAFE = END_SENSOR
/* constants for battery status */
const EMPTY_BATTERY = 0
const FULL_BATTERY  = 3
const MID_BATTERY   = FULL_BATTERY / 2
/* constants for grip strength */
const MIN_STRENGTH = 0
const MAX_STRENGTH = 3 
const MID_STRENGTH = MAX_STRENGTH / 2 

/* ranges for the respective constants */
range SAFE_RANGE          = BEG_SAFE..END_SAFE
range UNSAFE_RANGE        = BEG_UNSAFE..END_UNSAFE
range SENSOR_RANGE        = BEG_SENSOR..END_SENSOR
range STRENGTH_RANGE      = MIN_STRENGTH..MAX_STRENGTH
range LOW_STRENGTH_RANGE  = MIN_STRENGTH..MID_STRENGTH
range HIGH_STRENGTH_RANGE = MID_STRENGTH..MAX_STRENGTH
range CHARGE_RANGE        = EMPTY_BATTERY..FULL_BATTERY
range LOW_BATTERY_RANGE   = EMPTY_BATTERY..MID_BATTERY
range GOOD_BATTERY_RANGE  = MID_BATTERY..FULL_BATTERY

/* Controls measured values */
Controller = (checkAcceleration->AccelerationMonitor
             |checkCamera->CameraMonitor
             |checkLaser->LaserMonitor
             |checkBattery->BatteryMonitor
             |checkArm->ArmMonitor),

/* Monitor acceleration measured with sm or Rose */
AccelerationMonitor = (safe_acc->safe_acceleration->Controller
                      |unsafe_acc->unsafe_acceleration->signal->Controller),

/* Monitor safety module's or Rose's camera */
CameraMonitor = (safe_detect->safe_detection->Controller
                |unsafe_detect->unsafe_detection->signal->Controller),

/* Monitor Rose her LIDAR */
LaserMonitor = (safe_scn->safe_scan->Controller
               |unsafe_scn->unsafe_scan->signal->Controller),

/* Monitor the grip arm of Rose */
ArmMonitor = (low_str->low_strength->Controller
              |high_str->high_strength->signal->Controller),

/* Monitor the battery charge of Rose */
BatteryMonitor = (good_bat->good_battery->Controller
                 |low_bat->low_battery->signal->Controller).


/* Operator gets signalled by safety controller */
Operator = (readError->Operator).

/* Sensors and peripherals */
Accelerometer = (measure[i:SENSOR_RANGE]->Accelerometer).
Camera        = (measure[i:SENSOR_RANGE]->Camera).
LaserScanner  = (measure[i:SENSOR_RANGE]->LaserScanner).
Arm           = (getGripStrengh[i:STRENGTH_RANGE]->Arm).
Battery       = (getStatus[i:CHARGE_RANGE]->Battery).


MotorDriver = (speedUp->MotorDriver
              |slowDown->MotorDriver
              |turnRight->MotorDriver
              |turnLeft->MotorDriver).

/* The system consists of the controller, the operator and all the sensors,
 * peripherals and actuators. */
||System = (controller:Controller
           || operator:Operator
           || {smAccelerometer,roseAccelerometer}:Accelerometer
           || {smCamera,roseCamera}:Camera
           || roseLidar:LaserScanner
           || roseBattery:Battery
           || roseArm:Arm
           || roseMot:MotorDriver)
/* Couple controller-monitor actions to sensor,peripheral,actuator actions */
/{{smAccelerometer,roseAccelerometer}.measure[i:SAFE_RANGE]/controller.safe_acc,
  {smAccelerometer,roseAccelerometer}.measure[j:UNSAFE_RANGE]/controller.unsafe_acc,
  {smCamera,roseCamera}.measure[k:SAFE_RANGE]/controller.safe_detect,
  {smCamera,roseCamera}.measure[l:UNSAFE_RANGE]/controller.unsafe_detect,
  roseLidar.measure[m:SAFE_RANGE]/controller.safe_scn,
  roseLidar.measure[n:UNSAFE_RANGE]/controller.unsafe_scn,
  roseArm.getGripStrengh[o:HIGH_STRENGTH_RANGE]/controller.high_str,
  roseArm.getGripStrengh[o:LOW_STRENGTH_RANGE]/controller.low_str,
  roseBattery.getStatus[q:GOOD_BATTERY_RANGE]/controller.good_bat,
  roseBattery.getStatus[r:LOW_BATTERY_RANGE]/controller.low_bat,
  operator.readError/controller.signal
  }.

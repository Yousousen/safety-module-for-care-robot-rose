import DataTypes.dzn;
import Resolver.dzn;

interface IAccelerationControl {
	in Behavior check_acceleration();

	behaviour {
		on check_acceleration: { reply(Behavior.Safe); }
		on check_acceleration: { reply(Behavior.Unsafe); }
	}
}

interface IAccelerationSensor {
	in void retrieve_ke_from_acc(out ke_t ke);
	
	behaviour {
		on retrieve_ke_from_acc: {}
	}
}

component AccelerationControl {
	provides IAccelerationControl iAccelerationControl;
	requires IAccelerationSensor iAccelerationSensor;
	requires injected IResolver iResolver;

	behaviour {
		on iAccelerationControl.check_acceleration(): {
			ke_t ke;
			Behavior safetyState = Behavior.Safe;
			iAccelerationSensor.retrieve_ke_from_acc(ke);
			safetyState = iResolver.resolve_ke_from_acc(ke);
			reply(safetyState);
		}
	}
}
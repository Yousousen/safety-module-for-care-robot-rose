import DataTypes.dzn;
import LEDControl.dzn;

interface IController {
	in void initialise();
	in void destruct();
	in void reset();
	
	in void light_red(out framebuffer_t fb);
	in void light_blue(out framebuffer_t fb);

	in void safe_acceleration(out framebuffer_t fb);
	in void unsafe_acceleration(out framebuffer_t fb);

	behaviour {

		enum State {Idle, Operating};
		State state = State.Idle;

		[state.Idle] {
			on initialise: {
				state = State.Operating;
			}
			on destruct: illegal;
			on reset: illegal;
			on light_red: illegal;
			on light_blue: illegal;
			on safe_acceleration: illegal;
			on unsafe_acceleration: illegal;
		}
		[state.Operating] {
			on initialise: illegal;
			on destruct: {
				state = State.Idle;
			}

			on reset: illegal;

			on light_red: {}
			on light_blue: {}
			on safe_acceleration: {}
			on unsafe_acceleration: {}
		}
	}
}

component Controller {
	provides IController iController;
	requires ILEDControl iLEDControl;

	behaviour {
		unsigned_t color_red = $0x3000$;
		unsigned_t color_blue = $0x0006$;

		void trigger_red(out framebuffer_t fb) {
			iLEDControl.light_led(fb, color_red);
		}

		void trigger_blue(out framebuffer_t fb) {
			iLEDControl.light_led(fb, color_blue);
		}

		enum State {Idle, Operating};
		State state = State.Idle;



		[state.Idle] {
			on iController.initialise(): {
				iLEDControl.initialise_framebuffer();
				state = State.Operating;
			}
		}

		[state.Operating] {
			on iController.destruct(): {
				iLEDControl.destruct_framebuffer();
				state = State.Idle;
			}
			on iController.light_red(fb): {
				trigger_red(fb);
			}
			on iController.light_blue(fb): {
				trigger_blue(fb);
			}
			on iController.safe_acceleration(fb): {
				trigger_blue(fb);
			}
			on iController.unsafe_acceleration(fb): {
				trigger_red(fb);
			}
		}
	}
}

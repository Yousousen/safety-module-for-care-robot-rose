import ISafetyCheck.dzn;
import DataTypes.dzn;
import ILEDControl.dzn;

interface IController {
	in void initialise();
	in void destruct();
	in void reset();
	in UnsafeTriggered do_checks();
	out void initialise_imu();
	out void initialise_mutexes();
	out void initialise_semaphores();
	out void destruct_mutexes();
	out void destruct_semaphores();

	behaviour {
		enum State {Idle, Operating};
		State state = State.Idle;

		[state.Idle] {
			on initialise: {
				initialise_imu;
				initialise_mutexes;
				initialise_semaphores;
				state = State.Operating;
			}
			on destruct: illegal;
			on reset: illegal;
			on do_checks: illegal;
		}
		[state.Operating] {
			on initialise: illegal;
			on destruct: {
				destruct_mutexes;
				destruct_semaphores;
				state = State.Idle;
			}

			on reset: {}

			on do_checks: { reply(UnsafeTriggered.Yes); }
			on do_checks: { reply(UnsafeTriggered.No);  }
		}
	}
}

component Controller {
	provides IController iController;
	requires ILEDControl iLEDControl;
	requires ISafetyCheck iNext;

	behaviour {
		enum State {Idle, Operating};
		State systemState = State.Idle;
		bool unsafe_acknowledged = true;

		color_t red = $"0x3000"$;
		color_t blue = $"0x0006"$;
		

		[systemState.Idle] {
			on iController.initialise(): {
				iLEDControl.initialise_framebuffer();
				iController.initialise_imu();
				iController.initialise_mutexes();
				iController.initialise_semaphores();
				systemState = State.Operating;
			}
		}

		[systemState.Operating] {
			on iController.destruct(): {
				iLEDControl.destruct_framebuffer();
				iController.destruct_mutexes();
				iController.destruct_semaphores();
				systemState = State.Idle;
			}

			on iController.do_checks(): {
				Behavior safetyState = iNext.do_check();
				
				if (safetyState == Behavior.Unsafe) {
					iLEDControl.light_led_red(red);
					unsafe_acknowledged = false;
				} else if(unsafe_acknowledged) {
					iLEDControl.light_led_blue(blue);
				}
				if(!unsafe_acknowledged) {
					reply(UnsafeTriggered.Yes);
				}
				else {
					reply(UnsafeTriggered.No);
				}
			}
				
			// Unsafe behavior is acknowledged, reset state.
			on iController.reset(): {
				iLEDControl.reset_led();
				unsafe_acknowledged = true;
			}
		}
	}
}
import DataTypes.dzn;
import LEDControl.dzn;
import AccelerationControl.dzn;
import AngularAccelerationControl.dzn;
import GripArmControl.dzn;

interface IController {
	in void initialise();
	in void destruct();
	in void reset();
	
	// For debugging, only LEDControl is responsible for lighting.
//	in void light_red();
//	in void light_blue();
	
	in void do_checks();

	behaviour {

		enum State {Idle, Operating};
		State state = State.Idle;

		[state.Idle] {
			on initialise: {
				state = State.Operating;
			}
			on destruct: illegal;
			on reset: illegal;
//			on light_red: illegal;
//			on light_blue: illegal;
			on do_checks: illegal;
		}
		[state.Operating] {
			on initialise: illegal;
			on destruct: {
				state = State.Idle;
			}
			on reset: {}
			// light events here for debugging
//			on light_red: {}
//			on light_blue: {}
			on do_checks: {}
		}
	}
}

component Controller {
	provides IController iController;
	requires ILEDControl iLEDControl;
	requires IAccelerationControl iAccelerationControl;
	//requires IAngularAccelerationControl iAngularAccelerationControl;
	//requires IGripArmControl iGripArmControl;

	behaviour {
//		unsigned_t color_red = $0x3000$;
//		unsigned_t color_blue = $0x0006$;
//		framebuffer_t fb;

		enum State {Idle, Operating};
		State state = State.Idle;

		[state.Idle] {
			on iController.initialise(): {
				iLEDControl.initialise_framebuffer();
				state = State.Operating;
			}
		}

		[state.Operating] {
			on iController.destruct(): {
				iLEDControl.destruct_framebuffer();
				state = State.Idle;
			}
			// light_red / light_blue for testing purposes.
//			on iController.light_red(): {
//				iLEDControl.light_led_red();
//			}
//			on iController.light_blue(): {
//				iLEDControl.light_led_blue();
//			}
			on iController.do_checks(): {
				// check acceleration
				Behavior safetyState = iAccelerationControl.check_acceleration();
				if (safetyState == Behavior.Unsafe) {
					iLEDControl.light_led_red();
				} else {
					iLEDControl.light_led_blue();
				}
			}
			// Unsafe behavior is acknowledged, reset state.
			on iController.reset(): {
				iLEDControl.reset_led();
			}
		}
	}
}

import DataTypes.dzn;

interface ILEDControl {
	in void initialise_framebuffer();
	in void destruct_framebuffer();
	in void light_led_red(out color_t red);
	in void light_led_blue(out color_t blue);
	in void reset_led();

	behaviour {
		enum State {Idle, Operating};
		State systemState = State.Idle;
		enum LedState {Red, Blue, Low};
		LedState ledState = LedState.Low;
		
		[systemState.Idle] {
			on initialise_framebuffer: {
				systemState = State.Operating;
			}
			on destruct_framebuffer: illegal;
			[ledState.Low] {
				on light_led_red: illegal;
				on light_led_blue: illegal;
			}
			[ledState.Blue] {
				on light_led_red: illegal;
				on light_led_blue: illegal;
			}
			[ledState.Red] {
				on light_led_red: illegal;
				on light_led_blue: illegal;
			}
			on reset_led: illegal;
		}
		[systemState.Operating] {
			on initialise_framebuffer: illegal;
			on destruct_framebuffer: {
				systemState = State.Idle;
			}
			on reset_led: {
				ledState = LedState.Low;
			}
			[ledState.Low] {
				on light_led_blue: { ledState = LedState.Blue; }
				on light_led_red: { ledState = LedState.Red; }
			}
			[ledState.Blue] {
				on light_led_blue: { ledState = LedState.Blue; }
				on light_led_red: { ledState = LedState.Red; }
			}
			[ledState.Red] {
				// We cannot overwrite a red LED with blue, for once unsafe behavior
				// is detected it should signal this with a red LED.
				on light_led_blue: illegal;
				on light_led_red: { ledState = LedState.Red; }
			}
		}
	}
}
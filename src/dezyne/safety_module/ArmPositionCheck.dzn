import DataTypes.dzn;
import ISafetyCheck.dzn;
import Resolver.dzn;
import Sensors.dzn;

component ArmPositionCheck {
	requires IArmPositionSensor iArmPositionSensor;
	provides ISafetyCheck iArmPositionCheck;
	requires ISafetyCheck iNext;
	requires injected IResolver iResolver;

	behaviour {
		Behavior and_safety_states(Behavior current, Behavior next) {
			if(current == Behavior.Unsafe || next == Behavior.Unsafe) {
				return Behavior.Unsafe;
			}
			return Behavior.Safe;
		}

		on iArmPositionCheck.do_check(): {
			Behavior currSafetyState = Behavior.Safe;
			// TODO: Let the data go through the retriever here.
			iArmPositionSensor.retrieve_arm_pos();
			currSafetyState = iResolver.resolve_arm_pos();
			
			Behavior nextSafetyState = iNext.do_check();
			Behavior res = and_safety_states(currSafetyState, nextSafetyState); 
			reply(res);
		}
	}
}